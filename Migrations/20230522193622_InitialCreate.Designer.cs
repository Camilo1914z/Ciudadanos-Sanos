// <auto-generated />
using System;
using Ciudadanos_Sanos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ciudadanos_Sanos.Migrations
{
    [DbContext(typeof(CentrosaludContext))]
    [Migration("20230522193622_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ciudadanos_Sanos.Models.AgendacionCita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgendacionCitaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_Id")
                        .HasColumnType("int");

                    b.Property<int>("PatienteId")
                        .HasColumnType("int");

                    b.Property<int>("Patiente_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgendacionCitaId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatienteId");

                    b.ToTable("AgendacionCitas");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Doctor_Id")
                        .HasColumnType("int");

                    b.Property<int>("PatienteId")
                        .HasColumnType("int");

                    b.Property<int>("Patiente_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatienteId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Patiente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatienteId");

                    b.ToTable("Patientes");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Register", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegisterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.AgendacionCita", b =>
                {
                    b.HasOne("Ciudadanos_Sanos.Models.AgendacionCita", null)
                        .WithMany("AgendacionCitas")
                        .HasForeignKey("AgendacionCitaId");

                    b.HasOne("Ciudadanos_Sanos.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciudadanos_Sanos.Models.Patiente", "Patiente")
                        .WithMany()
                        .HasForeignKey("PatienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patiente");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Doctor", b =>
                {
                    b.HasOne("Ciudadanos_Sanos.Models.Doctor", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.MedicalHistory", b =>
                {
                    b.HasOne("Ciudadanos_Sanos.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ciudadanos_Sanos.Models.Patiente", "Patiente")
                        .WithMany()
                        .HasForeignKey("PatienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patiente");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Patiente", b =>
                {
                    b.HasOne("Ciudadanos_Sanos.Models.Patiente", null)
                        .WithMany("Patientes")
                        .HasForeignKey("PatienteId");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.User", b =>
                {
                    b.HasOne("Ciudadanos_Sanos.Models.Register", null)
                        .WithMany("Users")
                        .HasForeignKey("RegisterId");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.AgendacionCita", b =>
                {
                    b.Navigation("AgendacionCitas");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Doctor", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Patiente", b =>
                {
                    b.Navigation("Patientes");
                });

            modelBuilder.Entity("Ciudadanos_Sanos.Models.Register", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
